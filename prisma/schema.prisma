generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String?                 
  name                 String
  role                 Role                  @default(USER)
  firebaseUid          String?                @unique
  profilePicUrl        String?
  department           String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  applications         Application[]
  bio                  String?
  researchInterests     String[]
  faculty              Faculty?
  projectsParticipated ProjectParticipants[]
  favorites            Project[]             @relation("UserFavorites")
}

model Faculty {
  id             String        @id @default(uuid())
  userId         String        @unique
  title          String
  specialization String[]
  bio            String
  researchAreas  String[]
  officeHours    String?
  contactInfo    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])
  projects       Project[]
  publications   Publication[]
}

model Publication {
  id         String   @id @default(uuid())
  title      String
  authors    String[]
  journal    String?
  conference String?
  year       Int
  url        String?
  facultyId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  faculty    Faculty  @relation(fields: [facultyId], references: [id])
}

model Project {
  id           String                @id @default(uuid())
  title        String
  description  String
  keywords     String[]
  facultyId    String
  type         ProjectType
  startDate    DateTime?
  endDate      DateTime?
  status       ResearchStatus        @default(ONGOING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  applications Application[]
  faculty      Faculty               @relation(fields: [facultyId], references: [id])
  participants ProjectParticipants[]
  favorited    User[]                @relation("UserFavorites")
}

model ProjectParticipants {
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model Application {
  id        String            @id @default(uuid())
  userId    String
  projectId String
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  project   Project           @relation(fields: [projectId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  FACULTY
  USER
}

enum ResearchStatus {
  PLANNING
  ONGOING
  COMPLETED
  PUBLISHED
}

enum ProjectType {
  INDUSTRY
  RESEARCH
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum crdb_internal_region {
  aws_ap_south_1 @map("aws-ap-south-1")
}
