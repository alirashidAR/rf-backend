generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  name                 String
  role                 Role                  @default(USER)
  firebaseUid          String?               @unique
  profilePicUrl        String?
  department           String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  bio                  String?
  researchInterests    String[]
  password             String?
  applications         Application[]
  faculty              Faculty?
  projectsParticipated ProjectParticipants[]
  submissionItems      SubmissionItem[]
  favorites            Project[]             @relation("UserFavorites")
  phone                String?
  location             String?
}

model Faculty {
  id             String        @id @default(uuid())
  userId         String        @unique
  title          String
  specialization String[]
  bio            String
  researchAreas  String[]
  officeHours    String?
  contactInfo    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  location       String?
  phone          String?
  user           User          @relation(fields: [userId], references: [id])
  projects       Project[]
  publications   Publication[]
}

model Publication {
  id         String   @id @default(uuid())
  title      String
  authors    String[]
  journal    String?
  conference String?
  year       Int
  url        String?
  facultyId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  faculty    Faculty  @relation(fields: [facultyId], references: [id])
}

model Project {
  id                  String                @id @default(uuid())
  title               String
  description         String
  keywords            String[]
  facultyId           String
  type                ProjectType
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  applicationDeadline DateTime?
  location            Location              @default(ON_CAMPUS)
  positionsAvailable  Int                   @default(0)
  requirements        String[]
  status              ProjectStatus         @default(PENDING)
  applications        Application[]
  faculty             Faculty               @relation(fields: [facultyId], references: [id])
  participants        ProjectParticipants[]
  submissions         Submission[]
  favorited           User[]                @relation("UserFavorites")
}

model ProjectParticipants {
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model Application {
  id          String            @id @default(uuid())
  userId      String
  projectId   String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  coverLetter String?
  resumeUrl   String?
  project     Project           @relation(fields: [projectId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
}

model Submission {
  id              String           @id @default(uuid())
  projectId       String
  title           String
  description     String
  dueDate         DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submissionItems SubmissionItem[]
}

model SubmissionItem {
  id           String           @id @default(uuid())
  submissionId String
  userId       String
  fileUrl      String?
  submittedAt  DateTime         @default(now())
  feedback     String?
  status       SubmissionStatus @default(PENDING)
  submission   Submission       @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id])
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
}

enum Role {
  ADMIN
  FACULTY
  USER
}

enum ResearchStatus {
  PLANNING
  ONGOING
  COMPLETED
  PUBLISHED
}

enum Location {
  REMOTE
  ON_CAMPUS
}

enum ProjectStatus {
  ONGOING
  PENDING
  COMPLETED
}

enum ProjectType {
  INDUSTRY
  RESEARCH
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum crdb_internal_region {
  aws_ap_south_1 @map("aws-ap-south-1")
}
